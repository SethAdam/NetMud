@model NetMud.Models.ManageCharactersViewModel
@{
    ViewBag.Title = "Manage your characters";
}

<h2>@ViewBag.Title</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
@{
    if (Model.authedUser.GameAccount.Characters.Count() > 0)
    {
        <h4>Registered Characters</h4>
        using (Html.BeginForm("RemoveCharacter", "Manage"))
        {
            @Html.AntiForgeryToken()
            <table class="table">
                <tbody>


                    @foreach (var ch in Model.authedUser.GameAccount.Characters)
                    {
                        <tr>
                            <td>@ch.FullName()</td>
                            <td>@ch.RaceData.Name</td>
                            <td>@ch.Gender</td>
                            <td>@ch.GamePermissionsRank.ToString()</td>
                            <td>
                                <div>
                                    @Html.Hidden("ID", ch.ID)
                                    <input type="submit" style="color: red; border: none; padding: 0; background-color: inherit;" value="X" title="Delete this character" />
                                    <input type="radio" name="authorize" value="@ch.ID" style="margin-left: 15px;" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    }
    <section id="newCharacterForm">
        @using (Html.BeginForm("AddCharacter", "Manage", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <h4>New Character</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.EditorFor(e => e.NewName)
            @Html.EditorFor(e => e.NewSurName)
            @Html.EditorFor(e => e.NewGender)
            <div class="form-group">
                @Html.LabelFor(m => m.RaceId, new { @class = "col-md-3 control-label" })
                <div class="col-md-9">
                    @Html.DropDownList("RaceId", Model.ValidRaces.Select(rl =>
                                    new SelectListItem() { Text = rl.Name, Value = rl.ID.ToString() })
                                     , htmlAttributes: new { id = "raceId", Style = "padding: 7px;" })
                </div>
            </div>
            
            if (User.IsInRole("Admin"))
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.ChosenRole, new { @class = "col-md-3 control-label" })
                    <div class="col-md-9">
                        @Html.DropDownList("ChosenRole", Model.ValidRoles.Select(rl =>
                            new SelectListItem() { Text = rl.ToString(), Value = rl.ToString() })
                            , htmlAttributes: new { id = "chosenRole", Style = "padding: 7px;" })
                    </div>
                </div>
            }
            <div class="form-group">
                <div class="col-md-offset-2 col-md-9">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        }
    </section>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}